<?xml version="1.0" encoding="UTF-8"?>
<pmd-cpd>
   <duplication lines="23" tokens="143">
      <file line="46"
            path="/home/pietro/Desktop/netconf_stuff/java3/netconf/netconf/tools/netconf-testtool/src/main/java/org/opendaylight/netconf/test/tool/customrpc/SettableRpc.java"/>
      <file line="50"
            path="/home/pietro/Desktop/netconf_stuff/java3/netconf/netconf/tools/netconf-testtool/src/main/java/org/opendaylight/netconf/test/tool/rpchandler/SettableRpc.java"/>
      <codefragment><![CDATA[        final Optional<Document> response = mapping.getResponse(rpcElement);
        if (response.isPresent()) {
            final Document document = response.get();
            checkForError(document);
            document.getDocumentElement().setAttribute(XmlNetconfConstants.MESSAGE_ID, msgId);
            return document;
        } else if (subsequentOperation.isExecutionTermination()) {
            throw new DocumentedException("Mapping not found " + XmlUtil.toString(requestMessage),
                    DocumentedException.ErrorType.APPLICATION, DocumentedException.ErrorTag.OPERATION_NOT_SUPPORTED,
                    DocumentedException.ErrorSeverity.ERROR);
        } else {
            return subsequentOperation.execute(requestMessage);
        }
    }

    private static void checkForError(final Document document) throws DocumentedException {
        final XmlElement rpcReply = XmlElement.fromDomDocument(document);
        if (rpcReply.getOnlyChildElementOptionally("rpc-error").isPresent()) {
            throw DocumentedException.fromXMLDocument(document);
        }
    }

}]]></codefragment>
   </duplication>
   <duplication lines="17" tokens="125">
      <file line="102"
            path="/home/pietro/Desktop/netconf_stuff/java3/netconf/netconf/tools/netconf-testtool/src/main/java/org/opendaylight/netconf/test/tool/client/http/perf/RestPerfClient.java"/>
      <file line="129"
            path="/home/pietro/Desktop/netconf_stuff/java3/netconf/netconf/tools/netconf-testtool/src/main/java/org/opendaylight/netconf/test/tool/client/http/perf/RestPerfClient.java"/>
      <codefragment><![CDATA[                final StringBuilder destBuilder = new StringBuilder(DEST);
                destBuilder.replace(
                        destBuilder.indexOf(HOST_KEY),
                        destBuilder.indexOf(HOST_KEY) + HOST_KEY.length(),
                        parameters.ip)
                    .replace(
                        destBuilder.indexOf(PORT_KEY),
                        destBuilder.indexOf(PORT_KEY) + PORT_KEY.length(),
                        parameters.port + "");
                final StringBuilder suffixBuilder = new StringBuilder(parameters.destination);
                if (suffixBuilder.indexOf(DEVICE_PORT_KEY) != -1) {
                    suffixBuilder.replace(
                        suffixBuilder.indexOf(DEVICE_PORT_KEY),
                        suffixBuilder.indexOf(DEVICE_PORT_KEY) + DEVICE_PORT_KEY.length(),
                        devicePort + "");
                }
                destBuilder.append(suffixBuilder);]]></codefragment>
   </duplication>
   <duplication lines="13" tokens="111">
      <file line="37"
            path="/home/pietro/Desktop/netconf_stuff/java3/netconf/netconf/tools/netconf-testtool/src/main/java/org/opendaylight/netconf/test/tool/client/stress/AsyncExecutionStrategy.java"/>
      <file line="35"
            path="/home/pietro/Desktop/netconf_stuff/java3/netconf/netconf/tools/netconf-testtool/src/main/java/org/opendaylight/netconf/test/tool/client/stress/SyncExecutionStrategy.java"/>
      <codefragment><![CDATA[        final List<ListenableFuture<RpcResult<NetconfMessage>>> futures = Lists.newArrayList();

        int batchI = 0;
        for (final Integer editBatch : getEditBatches()) {
            for (int i = 0; i < editBatch; i++) {
                final int msgId = i + batchI * getParams().editBatchSize;
                final NetconfMessage msg = getPreparedMessages().get(msgId);
                LOG.debug("Sending message {}", msgId);
                if (LOG.isDebugEnabled()) {
                    LOG.debug("Sending message {}", XmlUtil.toString(msg.getDocument()));
                }
                final ListenableFuture<RpcResult<NetconfMessage>> netconfMessageFuture =
                        getSessionListener().sendRequest(msg, StressClient.EDIT_QNAME);]]></codefragment>
   </duplication>
</pmd-cpd>